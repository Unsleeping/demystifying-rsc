import {ClientComponent} from "./ClientComponent";
import {ServerComponent} from "./ServerComponent";

import ObserverWindow, {filterClientComponent, filterRawEvents} from "@/components/observer/RSCObserver";
import FileSource from "@/components/FileSource";
import ViewSource from "@/components/ViewSource";

export default ()=><>
  <h2>Server Components as Children of Client Components</h2>
  <ClientComponent>
    <ServerComponent/>
  </ClientComponent>

  <span className="file-source-title">JSX</span>
  <pre className={"code wrap"}>&lt;ClientComponent&gt;
    &lt;ServerComponent/&gt;
  &lt;/ClientComponent&gt;</pre>

  <FileSource title={"ClientComponent.js"} filepath={"/app/client-components/server-children/ClientComponent.js"}/>
  <FileSource title={"ServerComponent.js"} filepath={"/app/client-components/server-children/ServerComponent.js"}/>

  <h3>But how can a client component contain a server component?</h3>
  <p>This might be confusing at first, so let's clarify exactly what's happening:</p>
  <ol>
    <li>The server runs ServerComponent at request-time, on the server</li>
    <li>The ClientComponent is inserted into the Virtual DOM as a client component with its code split into its own js file</li>
    <li>In the Virtual DOM, the ClientComponent's {"{children}"} property is set to the static generated content of the ServerComponent output</li>
    <li>When the ClientComponent runs in the browser, it simply inserts its {"{children}"} content.</li>
    <li>The ClientComponent doesn't care whether its {"{children}"} began as static content or was generated by RSC!</li>
  </ol>

  <h3>ClientComponent doesn't need to run ServerComponent!</h3>
  <p>ClientComponent doesn't know anything about what's inside of it. It just gets passed a {"{children}"} property and can insert the content into its output. It knows nothing about its {"{children}"}.</p>
  <p>To render itself, ClientComponent doesn't need to run or render its {"{children}"}!</p>
  <p>ClientComponent constructs a box, and is handed what to put in the box via {"{children}"}. The creation of the box itself can happen regardless of what's being put in it. The two are independent.</p>

  <h3>What if ClientComponent wants to control ServerComponent at run-time?</h3>
  <p>Maybe ClientComponent wants to use state, and depending on that state render ServerComponent differently.</p>
  <p><b>This is not possible!</b> Here's why...</p>

  <p><a className={"button"} href={"/client-components/server-import/"}>Importing Server Components into Client Components</a></p>

</>
